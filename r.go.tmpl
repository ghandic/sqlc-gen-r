{{- /*
https://pkg.go.dev/text/template
https://github.com/sqlc-dev/sqlc/blob/main/protos/plugin/codegen.proto
*/ -}}

{{- define "RType" -}}
{{- $typeLower := ToLower .Type.Name -}}
{{- $rType := "character()" -}}
{{- if or (eq $typeLower "integer") (eq $typeLower "int") -}}
  {{- $rType = "integer()" -}}
{{- else if or (eq $typeLower "text") (eq $typeLower "varchar") (eq $typeLower "char") -}}
  {{- $rType = "character()" -}}
{{- else if or (eq $typeLower "real") (eq $typeLower "float") (eq $typeLower "double") -}}
  {{- $rType = "numeric()" -}}
{{- else if eq $typeLower "blob" -}}
  {{- $rType = "raw()" -}}
{{- else if eq $typeLower "boolean" -}}
  {{- $rType = "logical()" -}}
{{- end -}}
{{- $rType -}}
{{- end -}}

{{- define "RCheck" -}}
{{- $typeLower := ToLower .Type.Name -}}
{{- if or (eq $typeLower "integer") (eq $typeLower "int") -}}
  check_number_whole({{.Name}})
{{- else if or (eq $typeLower "text") (eq $typeLower "varchar") (eq $typeLower "char") -}}
  check_string({{.Name}})
{{- else if or (eq $typeLower "real") (eq $typeLower "float") (eq $typeLower "double") -}}
  check_number_decimal({{.Name}})
{{- else if eq $typeLower "boolean" -}}
  check_bool({{.Name}})
{{- else -}}
  # No type check defined for type "{{.Type.Name}}", consider adding one.
{{- end -}}
{{- end -}}

# Generate R functions for SQL queries
# Each function will:
# 1. Take parameters (if any), with type checks.
# 2. Execute the SQL query.
# 3. Return the results as a data frame.

library(DBI)
library(glue)
library(rlang)
source("R/import-standalone-obj-type.R")
source("R/import-standalone-types-check.R")

{{- range .Queries }}

# Comments from SQL:
{{- range .Comments }}
# {{.}}
{{- end }}

#' {{.Name}}
#'
#' Executes the SQL query "{{.Name}}" and returns the result as a data frame.
#'
#' @param conn A DBI connection object.
{{- range .Params }}
#' @param {{.Column.Name}} {{template "RType" .Column}}
{{- end }}
#' @return A data frame containing the results of the query.
#' @export
{{.Name}} <- function(conn{{- range .Params -}}, {{.Column.Name}}{{- end -}}) {
  # Type checks for parameters using r-lib's standalone checks
  {{- range .Params }}
  {{template "RCheck" .Column}}
  {{- end }}

  # Build the SQL query using glue
  sql <- glue::glue_sql("{{.Text}}",
    {{- range .Params }}
    {{.Column.Name}} = {{.Column.Name}},
    {{- end }}
    .con = conn
  )

  # Execute the query and fetch the results
  result <- DBI::dbGetQuery(conn, sql)

  return(result)
}

{{- end }}
